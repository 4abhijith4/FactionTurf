# .github/workflows/auto-merge.yml
name: Validate and Auto-Merge PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'Actions/Action.json'

permissions:
  contents: write
  pull-requests: write

jobs:
  validate-and-merge:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Validate Action.json
        id: validate
        run: |
          # Check if file exists
          if [ ! -f "Actions/Action.json" ]; then
            echo "‚ùå Action.json file not found"
            exit 1
          fi
          
          # Validate JSON syntax
          if ! jq empty Actions/Action.json 2>/dev/null; then
            echo "‚ùå Invalid JSON syntax"
            exit 1
          fi
          
          # Validate action field
          ACTION=$(jq -r '.action' Actions/Action.json)
          VALID_ACTIONS=("UP" "DOWN" "RIGHT" "LEFT" "SHOOT")
          
          if [[ ! " ${VALID_ACTIONS[@]} " =~ " ${ACTION} " ]]; then
            echo "‚ùå Invalid action: $ACTION. Must be UP, DOWN, RIGHT, LEFT, or SHOOT"
            exit 1
          fi
          
          # Validate name field exists and is not empty
          NAME=$(jq -r '.name' Actions/Action.json)
          if [ -z "$NAME" ] || [ "$NAME" == "null" ]; then
            echo "‚ùå Name field is required and cannot be empty"
            exit 1
          fi
          
          echo "‚úÖ Validation passed: Action=$ACTION, Name=$NAME"
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
      
      - name: Send to API
        if: success()
        run: |
          # Get PR author's GitHub profile info
          GITHUB_USERNAME="${{ github.event.pull_request.user.login }}"
          GITHUB_AVATAR="${{ github.event.pull_request.user.avatar_url }}"
          GITHUB_PROFILE="${{ github.event.pull_request.user.html_url }}"
          
          # Prepare payload
          PAYLOAD=$(jq -n \
            --arg action "${{ steps.validate.outputs.action }}" \
            --arg name "${{ steps.validate.outputs.name }}" \
            --arg username "$GITHUB_USERNAME" \
            --arg avatar "$GITHUB_AVATAR" \
            --arg profile "$GITHUB_PROFILE" \
            '{
              action: $action,
              name: $name,
              githubUsername: $username,
              githubAvatar: $avatar,
              githubProfile: $profile
            }')
          
          echo "üì§ Sending to API: $PAYLOAD"
          
          # Send POST request
          HTTP_CODE=$(curl -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            -w "%{http_code}" \
            -o /dev/null \
            -s \
            https://faction-turf.vercel.app/api/postInfo)
          
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "‚úÖ API call successful (HTTP $HTTP_CODE)"
          else
            echo "‚ùå API call failed (HTTP $HTTP_CODE)"
            exit 1
          fi
      
      - name: Enable auto-merge
        if: success()
        run: |
          echo "üîÄ Enabling auto-merge..."
          gh pr merge ${{ github.event.pull_request.number }} --auto --squash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}