name: Validate/Merge
on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize
permissions:
  pull-requests: write
  contents: write
jobs:
  audit:
    runs-on: ubuntu-latest
    outputs:
      PR_AUTHOR: ${{ steps.pr_user.outputs.PR_AUTHOR }}
    steps:
      - name: Check if PR is from a fork
        id: pr_source
        run: |
          if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
            echo "PR is from a fork."
            echo "is_fork=true" >> $GITHUB_OUTPUT
          else
            echo "PR is not from a fork."
            echo "is_fork=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      
      - name: Get the changed files
        id: changes
        run: |
          echo "Fetching changed files from GitHub API..."
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          echo "Fetching files changed in PR #$PR_NUMBER"
          
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/files" \
               | jq -r '.[].filename' > changes.txt
          echo "Changed files:"
          cat changes.txt
      
      - name: Validate pixel_update.json
        run: |
          CHANGED_FILES=$(cat changes.txt)
          TOTAL_FILES=$(echo "$CHANGED_FILES" | wc -l)
          
          if [[ "$TOTAL_FILES" -eq 1 ]] && [[ "$CHANGED_FILES" == "pixel_update.json" ]]; then
            echo "‚úÖ Only pixel_update.json was modified. Proceeding with validation..."
          else
            echo "‚ùå Error: Changes found in files other than pixel_update.json. Failing the PR."
            exit 1
          fi
      
      - name: Save the content of changed file
        run: |
          cat pixel_update.json > changed_file_content.txt
      
      - name: Get the PR author username
        id: pr_user
        run: |
          branch_name=${{ github.event.pull_request.user.login }}
          echo "PR_AUTHOR=$branch_name" >> $GITHUB_OUTPUT
          echo "The PR was created by $branch_name"
      
      - name: Validate and send request
        run: |
          python validate_pixel_update.py changes.txt changed_file_content.txt \
            ${{ github.event.pull_request.user.login }} \
            https://amplacebackend.amfoss.in/api/update_pixel

  auto_merge_pr:
    needs: audit
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_AUTHOR: ${{ needs.audit.outputs.PR_AUTHOR }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Create or update user branch
        run: |
          branch_name="user-$PR_AUTHOR"
          
          # Fetch latest main
          git fetch origin main
          
          # Check if branch exists remotely
          if git ls-remote --heads origin "$branch_name" | grep -q "$branch_name"; then
            echo "‚úÖ Branch $branch_name exists. Fetching it..."
            git fetch origin "$branch_name"
            git checkout "$branch_name"
          else
            echo "üìå Branch $branch_name does not exist. Creating from main..."
            git checkout -b "$branch_name" origin/main
            git push origin "$branch_name"
          fi
      
      - name: Merge PR into user branch
        run: |
          branch_name="user-$PR_AUTHOR"
          pr_branch="${{ github.event.pull_request.head.ref }}"
          pr_repo="${{ github.event.pull_request.head.repo.full_name }}"
          
          # Fetch the PR branch
          if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
            # PR is from a fork
            git remote add fork "https://github.com/$pr_repo.git"
            git fetch fork "$pr_branch"
            git merge "fork/$pr_branch" --no-ff -m "Merge PR #$PR_NUMBER from @$PR_AUTHOR into $branch_name"
          else
            # PR is from same repo
            git fetch origin "$pr_branch"
            git merge "origin/$pr_branch" --no-ff -m "Merge PR #$PR_NUMBER from @$PR_AUTHOR into $branch_name"
          fi
          
          # Push the merge
          git push origin "$branch_name"
          
          echo "‚úÖ Merged PR #$PR_NUMBER into $branch_name"
      
      - name: Comment and close PR
        run: |
          gh pr comment $PR_NUMBER --body "‚úÖ **PR Merged Successfully!**

This PR has been automatically merged into branch \`user-$PR_AUTHOR\`.

Your changes are now available in your personal branch!"
          
          gh pr close $PR_NUMBER
          
          echo "‚úÖ PR #$PR_NUMBER closed successfully"
      
      - name: Handle failure
        if: failure()
        run: |
          echo "‚ùå Workflow failed. Closing PR #$PR_NUMBER"
          
          gh pr comment $PR_NUMBER --body "‚ö†Ô∏è **Auto-merge Failed**

There was an error processing this PR. Please check the workflow logs for details.

This PR has been automatically closed."
          
          gh pr close $PR_NUMBER