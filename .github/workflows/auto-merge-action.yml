name: Auto-merge valid Action.json PRs

on:
  pull_request_target:
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Validate, create branch, and merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const allowedActions = ["UP", "DOWN", "LEFT", "RIGHT", "SHOOT"];
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = pr.number;

            async function commentAndClose(reason) {
              core.info(`‚ùå Closing PR #${prNumber}: ${reason}`);
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: `‚ö†Ô∏è This PR was automatically closed.\n\n**Reason:** ${reason}`
              });
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: prNumber,
                state: "closed"
              });
            }

            if (pr.draft) {
              await commentAndClose("PR is a draft. Please mark it as ready for review.");
              return;
            }

            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber,
            });

            if (files.data.length !== 1 || files.data[0].filename !== "Actions/Action.json") {
              await commentAndClose("Only 'Actions/Action.json' can be modified in this PR.");
              return;
            }

            const raw_url = files.data[0].raw_url;
            const res = await fetch(raw_url);
            const text = await res.text();

            let data;
            try {
              data = JSON.parse(text);
            } catch (err) {
              await commentAndClose("Invalid JSON format in 'Actions/Action.json'.");
              return;
            }

            const { action } = data;
            if (!allowedActions.includes(action)) {
              await commentAndClose(
                `Invalid action '${action}'. Must be one of: ${allowedActions.join(", ")}.`
              );
              return;
            }

            // --- Create branch with username ---
            const usernameBranch = `user-${pr.user.login}`;
            
            // Get main branch SHA
            const mainRef = await github.rest.git.getRef({
              owner,
              repo,
              ref: "heads/main",
            });
            const mainSha = mainRef.data.object.sha;

            try {
              // Create new branch
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/heads/${usernameBranch}`,
                sha: mainSha,
              });
              core.info(`‚úÖ Created branch: ${usernameBranch}`);
            } catch (err) {
              if (err.status === 422) {
                core.info(`‚ö†Ô∏è Branch ${usernameBranch} already exists. Using it.`);
              } else {
                throw err;
              }
            }

            // Merge PR into the new branch
            try {
              const mergeRes = await github.rest.repos.merge({
                owner,
                repo,
                base: usernameBranch,
                head: pr.head.ref,
                commit_message: `Merge PR #${prNumber} into ${usernameBranch}`,
              });
              core.info(`‚úÖ Merged PR #${prNumber} into ${usernameBranch}`);
            } catch (err) {
              await commentAndClose(`Merge into ${usernameBranch} failed: ${err.message}`);
              return;
            }

            // --- POST to server ---
            const username = pr.user.login;
            const payload = JSON.stringify({ username, action });
            const serverUrl = process.env.ACTION_SERVER_URL;

            try {
              const postRes = await fetch(serverUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: payload,
              });
              core.info(`üåê POST to server: ${postRes.status} ${postRes.statusText}`);
            } catch (err) {
              core.warning(`‚ö†Ô∏è Failed to send POST to server: ${err.message}`);
            }
        env:
          ACTION_SERVER_URL: ${{ secrets.ACTION_SERVER_URL }}
